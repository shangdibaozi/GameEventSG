using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace GameEventGenerator
{
    [Generator]
    public class GameEventGenerator : ISourceGenerator
    {
        private const string attributeText = @"
/// <summary>
/// static event attribute interface.
/// </summary>
public interface IStaticEventAttribute { }
";
        
        public void Initialize(GeneratorInitializationContext context)
        {
            context.RegisterForPostInitialization(i => i.AddSource("IStaticEventAttribute.g.cs", SourceText.From(attributeText, Encoding.UTF8)));
            // Register our custom syntax receiver
            context.RegisterForSyntaxNotifications(() => new EventSyntaxReceiver());
        }

        public void Execute(GeneratorExecutionContext context)
        {
            // Get our registered syntax receiver
            var receiver = context.SyntaxReceiver as EventSyntaxReceiver;
            if (receiver == null)
                return;

            // Get the IEventAttribute symbol
            INamedTypeSymbol eventAttributeInterface = context.Compilation.GetTypeByMetadataName("IStaticEventAttribute");
            if (eventAttributeInterface == null)
                return;

            // We'll collect methods by attribute type
            Dictionary<INamedTypeSymbol, List<IMethodSymbol>> methodsByAttribute = new Dictionary<INamedTypeSymbol, List<IMethodSymbol>>(SymbolEqualityComparer.Default);

            foreach (MethodDeclarationSyntax method in receiver.Methods)
            {
                SemanticModel model = context.Compilation.GetSemanticModel(method.SyntaxTree);
                IMethodSymbol methodSymbol = model.GetDeclaredSymbol(method) as IMethodSymbol;

                if (methodSymbol != null && methodSymbol.IsStatic)
                {
                    // Find all attributes that implement IEventAttribute
                    foreach (AttributeData attribute in methodSymbol.GetAttributes())
                    {
                        INamedTypeSymbol attributeClass = attribute.AttributeClass;
                        if (attributeClass != null && 
                            attributeClass.AllInterfaces.Contains(eventAttributeInterface))
                        {
                            if (!methodsByAttribute.ContainsKey(attributeClass))
                            {
                                methodsByAttribute[attributeClass] = new List<IMethodSymbol>();
                            }
                            methodsByAttribute[attributeClass].Add(methodSymbol);
                        }
                    }
                }
            }

            // Generate source code for each event type
            foreach (var pair in methodsByAttribute)
            {
                string eventName = GetEventName(pair.Key.Name);
                string source = GenerateSourceCode(eventName, pair.Value);
                context.AddSource($"{eventName}Event.g.cs", SourceText.From(source, Encoding.UTF8));
            }
        }

        private string GetEventName(string attributeName)
        {
            if (attributeName.EndsWith("Attribute"))
                return attributeName.Substring(0, attributeName.Length - "Attribute".Length);
            return attributeName;
        }

        private string GenerateSourceCode(string eventName, List<IMethodSymbol> methods)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("// <auto-generated/>");
            sb.AppendLine("using System;");
            sb.AppendLine();
            sb.AppendLine($"public static class {eventName}Events");
            sb.AppendLine("{");
            sb.AppendLine($"    public static void {eventName}()");
            sb.AppendLine("    {");
            
            foreach (IMethodSymbol method in methods)
            {
                string className = method.ContainingType.ToDisplayString();
                string methodName = method.Name;
                sb.AppendLine($"        {className}.{methodName}();");
            }
            
            sb.AppendLine("    }");
            sb.AppendLine("}");
            return sb.ToString();
        }
    }
}
